async function obtenerYCargarFichadas() {
  try {
    let fichadas = await obtenerFichadas();
   
    let first = false;
    let registrosViejos = await leerRegistrosExistentes(
      path.join(ruta_csv_fichadas, `${format(new Date(), "yyyy-MM-dd")}.csv`)
    ); //Lee los registros del dia
    let registrosNuevos = [];

    if (registrosViejos.length === 0) {
      first = true;
      registrosNuevos = fichadas.map((d) => ({
        ...d,
        cantidad: 0,
      })); // Si registrosViejos está vacío, agregar cantidad 0
    } else {
      registrosNuevos = fichadas
        .filter(
          (d1) => !registrosViejos.some((d2) => d1.ID.toString() === d2.ID)
        )
        .map((d1) => {
          // Contar cuántos registros hay con el mismo pin en registrosViejos
          const cantidad = registrosViejos.filter(
            (d2) => d2.pin === d1.pin
          ).length;
          return { ...d1, cantidad }; // Agregar el campo cantidad
        }); 
    }

    let promises = registrosNuevos?.map((reg) =>
      (parseInt(reg.cantidad) + 1) % 2 === 0
          ? cargarSalida(reg) //Si es par, carga salida
          : cargarEntrada(reg) //impar, carga entrada
    );
    await Promise.allSettled(promises); //ejecuta las promesas generadas
    formatearYCargarFichadas(registrosNuevos); //invoca función
  } catch (e) {
    console.error("ERROR obtenerYCargarFichadas: ", e?.message || e);
  }
}

module.exports = { obtenerYCargarFichadas };