async function leerRegistrosExistentes(ruta) {
  return new Promise((resolve, reject) => {
    const registros = [];

    // Verificar si el archivo existe
    fs.access(ruta, fs.constants.F_OK, (err) => {
      if (err) {
        // Si el archivo no existe, devolver un array vacío
        return resolve(registros);
      }

      fs.createReadStream(ruta) // Crea un flujo de lectura
        .pipe(fastcsv.parse({ headers: true })) // Pasa el flujo de datos a fastcsv para analizar el CSV, usando la primera fila como encabezados
        .on("data", (fila) => registros.push(fila)) // Por cada fila leída, la agrega al arreglo 'registros'
        .on("end", () => {
          resolve(registros); // Resuelve la promesa con los registros leídos
        })
        .on("error", (error) => {
          reject("ERROR leerRegistrosExistentes: " + (error?.message || error));
        });
    });
  });
}

